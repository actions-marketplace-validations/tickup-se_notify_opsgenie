package main

import (
	"fmt"
	"github.com/opsgenie/opsgenie-go-sdk-v2/client"
	"github.com/opsgenie/opsgenie-go-sdk-v2/incident"
	"log"
	"os"
)

func main() {
	//Start of action
	fmt.Println("opsgenie incident report started")

	//Extract all arguments
	allArguments := os.Args[1:]
	fmt.Println(allArguments)

	//Did we get the correct number of arguments
	if len(allArguments) != 6 {
		log.Fatalf("wrong number of arguments passed, got %d arguments.", len(allArguments))
	}

	//Validate the priority string
	var priority = allArguments[2]

	if len(priority) != 2 {
		log.Fatal("priority string is not 2 characters 'Pn', provided string: " + priority)
	}
	//ASCII value of '0' is decimal 48 and '9' is decimal 57.
	if priority[0] != 'P' || priority[1] < 49 || priority[1] > 53 {
		log.Fatal("priority myst be formatted as 'Pn' where P is capital and n is a number between 1 and 5, provided string: " + priority)
	}

	fmt.Println("GITHUB_ACTION:", os.Getenv("GITHUB_ACTION"))
	fmt.Println("GITHUB_ACTOR:", os.Getenv("GITHUB_ACTOR"))
	fmt.Println("GITHUB_EVENT_NAME:", os.Getenv("GITHUB_EVENT_NAME"))
	fmt.Println("GITHUB_REF:", os.Getenv("GITHUB_REF"))
	fmt.Println("GITHUB_REF_NAME:", os.Getenv("GITHUB_REF_NAME"))
	fmt.Println("GITHUB_REPOSITORY:", os.Getenv("GITHUB_REPOSITORY"))
	fmt.Println("GITHUB_REPOSITORY_OWNER:", os.Getenv("GITHUB_REPOSITORY_OWNER"))
	fmt.Println("GITHUB_SHA:", os.Getenv("GITHUB_SHA"))
	fmt.Println("GITHUB_WORKFLOW:", os.Getenv("GITHUB_WORKFLOW"))
	fmt.Println("RUNNER_ARCH:", os.Getenv("RUNNER_ARCH"))
	fmt.Println("RUNNER_NAME:", os.Getenv("RUNNER_NAME"))
	fmt.Println("RUNNER_OS:", os.Getenv("RUNNER_OS"))

	//Create the client
	incidentClient, err := incident.NewClient(
		&client.Config{
			ApiKey: allArguments[3],
		},
	)
	if err != nil {
		log.Fatal(err)
	}

	var falseType = false
	//var trueType = true

	//Create the incident
	createResult, err := incidentClient.Create(
		nil, &incident.CreateRequest{
			Message:     "Notification from: " + os.Getenv("GITHUB_REPOSITORY"),
			Description: "This incident is generated by the GitHub workflow " + os.Getenv("GITHUB_WORKFLOW") + " commit: " + os.Getenv("GITHUB_SHA"),
			Responders: []incident.Responder{
				{Type: incident.Team, Name: allArguments[5]},
				//{Type: incident.User, Id: ""},
			},
			Tags: []string{allArguments[5]},
			Details: map[string]string{
				"branch":      os.Getenv("GITHUB_REF_NAME"),
				"runner arch": os.Getenv("RUNNER_ARCH"),
				"runner os":   os.Getenv("RUNNER_OS"),
			},
			Priority:  incident.Priority(priority),
			Note:      "",
			ServiceId: "",
			StatusPageEntity: &incident.StatusPageEntity{
				Title:       "",
				Description: "",
			},
			NotifyStakeholders: &falseType,
		},
	)
	if err != nil {
		log.Fatal(err)
	}

	//Output the result
	fmt.Println(createResult)
}
